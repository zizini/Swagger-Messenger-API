/**
 * Whats App API
 * Whats App API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: irma.tabakis@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiInvoker;
import io.swagger.client.ApiException;
import io.swagger.client.Pair;

import io.swagger.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import io.swagger.client.model.Chat;
import io.swagger.client.model.InlineResponse20019;
import io.swagger.client.model.InlineResponse20020;
import io.swagger.client.model.InlineResponse20021;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class ChatApi {
  String basePath = "https://virtserver.swaggerhub.com/asterakia/WhatsApp/1.0.0";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Get all files belonging to a specific chat
  * 
   * @param chatId 
   * @return InlineResponse20019
  */
  public InlineResponse20019 chatChatIdFileGet (String chatId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'chatId' is set
    if (chatId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'chatId' when calling chatChatIdFileGet",
        new ApiException(400, "Missing the required parameter 'chatId' when calling chatChatIdFileGet"));
    }

    // create path and map variables
    String path = "/chat/{chatId}/file".replaceAll("\\{" + "chatId" + "\\}", apiInvoker.escapeString(chatId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (InlineResponse20019) ApiInvoker.deserialize(localVarResponse, "", InlineResponse20019.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get all files belonging to a specific chat
   * 
   * @param chatId 
  */
  public void chatChatIdFileGet (String chatId, final Response.Listener<InlineResponse20019> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'chatId' is set
    if (chatId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'chatId' when calling chatChatIdFileGet",
        new ApiException(400, "Missing the required parameter 'chatId' when calling chatChatIdFileGet"));
    }

    // create path and map variables
    String path = "/chat/{chatId}/file".replaceAll("\\{format\\}","json").replaceAll("\\{" + "chatId" + "\\}", apiInvoker.escapeString(chatId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InlineResponse20019) ApiInvoker.deserialize(localVarResponse,  "", InlineResponse20019.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get a chat by ID
  * 
   * @param chatId 
   * @return Chat
  */
  public Chat chatChatIdGet (String chatId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'chatId' is set
    if (chatId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'chatId' when calling chatChatIdGet",
        new ApiException(400, "Missing the required parameter 'chatId' when calling chatChatIdGet"));
    }

    // create path and map variables
    String path = "/chat/{chatId}".replaceAll("\\{" + "chatId" + "\\}", apiInvoker.escapeString(chatId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Chat) ApiInvoker.deserialize(localVarResponse, "", Chat.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get a chat by ID
   * 
   * @param chatId 
  */
  public void chatChatIdGet (String chatId, final Response.Listener<Chat> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'chatId' is set
    if (chatId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'chatId' when calling chatChatIdGet",
        new ApiException(400, "Missing the required parameter 'chatId' when calling chatChatIdGet"));
    }

    // create path and map variables
    String path = "/chat/{chatId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "chatId" + "\\}", apiInvoker.escapeString(chatId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Chat) ApiInvoker.deserialize(localVarResponse,  "", Chat.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Returns all the media files shared in a chat
  * 
   * @param chatId 
   * @return InlineResponse20020
  */
  public InlineResponse20020 chatChatIdMediaGet (String chatId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'chatId' is set
    if (chatId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'chatId' when calling chatChatIdMediaGet",
        new ApiException(400, "Missing the required parameter 'chatId' when calling chatChatIdMediaGet"));
    }

    // create path and map variables
    String path = "/chat/{chatId}/media".replaceAll("\\{" + "chatId" + "\\}", apiInvoker.escapeString(chatId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (InlineResponse20020) ApiInvoker.deserialize(localVarResponse, "", InlineResponse20020.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Returns all the media files shared in a chat
   * 
   * @param chatId 
  */
  public void chatChatIdMediaGet (String chatId, final Response.Listener<InlineResponse20020> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'chatId' is set
    if (chatId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'chatId' when calling chatChatIdMediaGet",
        new ApiException(400, "Missing the required parameter 'chatId' when calling chatChatIdMediaGet"));
    }

    // create path and map variables
    String path = "/chat/{chatId}/media".replaceAll("\\{format\\}","json").replaceAll("\\{" + "chatId" + "\\}", apiInvoker.escapeString(chatId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InlineResponse20020) ApiInvoker.deserialize(localVarResponse,  "", InlineResponse20020.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Edit the notifications a user can receive from a chat
  * 
   * @param chatId 
   * @param userId 
   * @param userAddedNotifications 
   * @param messageNotifications 
   * @return InlineResponse20021
  */
  public InlineResponse20021 chatChatIdUserUserIdNotificationsPut (String chatId, String userId, Boolean userAddedNotifications, Boolean messageNotifications) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'chatId' is set
    if (chatId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'chatId' when calling chatChatIdUserUserIdNotificationsPut",
        new ApiException(400, "Missing the required parameter 'chatId' when calling chatChatIdUserUserIdNotificationsPut"));
    }
    // verify the required parameter 'userId' is set
    if (userId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'userId' when calling chatChatIdUserUserIdNotificationsPut",
        new ApiException(400, "Missing the required parameter 'userId' when calling chatChatIdUserUserIdNotificationsPut"));
    }

    // create path and map variables
    String path = "/chat/{chatId}/user/{userId}/notifications".replaceAll("\\{" + "chatId" + "\\}", apiInvoker.escapeString(chatId.toString())).replaceAll("\\{" + "userId" + "\\}", apiInvoker.escapeString(userId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "user_added_notifications", userAddedNotifications));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "message_notifications", messageNotifications));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (InlineResponse20021) ApiInvoker.deserialize(localVarResponse, "", InlineResponse20021.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Edit the notifications a user can receive from a chat
   * 
   * @param chatId    * @param userId    * @param userAddedNotifications    * @param messageNotifications 
  */
  public void chatChatIdUserUserIdNotificationsPut (String chatId, String userId, Boolean userAddedNotifications, Boolean messageNotifications, final Response.Listener<InlineResponse20021> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'chatId' is set
    if (chatId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'chatId' when calling chatChatIdUserUserIdNotificationsPut",
        new ApiException(400, "Missing the required parameter 'chatId' when calling chatChatIdUserUserIdNotificationsPut"));
    }
    // verify the required parameter 'userId' is set
    if (userId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'userId' when calling chatChatIdUserUserIdNotificationsPut",
        new ApiException(400, "Missing the required parameter 'userId' when calling chatChatIdUserUserIdNotificationsPut"));
    }

    // create path and map variables
    String path = "/chat/{chatId}/user/{userId}/notifications".replaceAll("\\{format\\}","json").replaceAll("\\{" + "chatId" + "\\}", apiInvoker.escapeString(chatId.toString())).replaceAll("\\{" + "userId" + "\\}", apiInvoker.escapeString(userId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "user_added_notifications", userAddedNotifications));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "message_notifications", messageNotifications));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InlineResponse20021) ApiInvoker.deserialize(localVarResponse,  "", InlineResponse20021.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
