/**
 * Whats App API
 * Whats App API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: irma.tabakis@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiInvoker;
import io.swagger.client.ApiException;
import io.swagger.client.Pair;

import io.swagger.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import io.swagger.client.model.InlineResponse20012;
import io.swagger.client.model.InlineResponse20013;
import io.swagger.client.model.Media;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class MediaApi {
  String basePath = "https://virtserver.swaggerhub.com/asterakia/WhatsApp/1.0.0";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Delete a media object.
  * 
   * @param mediaId The ID of the specific media object the developer wishes to delete
   * @return Media
  */
  public Media mediaMediaIdDelete (String mediaId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'mediaId' is set
    if (mediaId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'mediaId' when calling mediaMediaIdDelete",
        new ApiException(400, "Missing the required parameter 'mediaId' when calling mediaMediaIdDelete"));
    }

    // create path and map variables
    String path = "/media/{mediaId}".replaceAll("\\{" + "mediaId" + "\\}", apiInvoker.escapeString(mediaId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Media) ApiInvoker.deserialize(localVarResponse, "", Media.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Delete a media object.
   * 
   * @param mediaId The ID of the specific media object the developer wishes to delete
  */
  public void mediaMediaIdDelete (String mediaId, final Response.Listener<Media> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'mediaId' is set
    if (mediaId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'mediaId' when calling mediaMediaIdDelete",
        new ApiException(400, "Missing the required parameter 'mediaId' when calling mediaMediaIdDelete"));
    }

    // create path and map variables
    String path = "/media/{mediaId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "mediaId" + "\\}", apiInvoker.escapeString(mediaId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Media) ApiInvoker.deserialize(localVarResponse,  "", Media.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Upload a file
  * 
   * @param file The file which is being uploaded
   * @return InlineResponse20012
  */
  public InlineResponse20012 mediaPost (String file) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'file' is set
    if (file == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'file' when calling mediaPost",
        new ApiException(400, "Missing the required parameter 'file' when calling mediaPost"));
    }

    // create path and map variables
    String path = "/media";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      if (file != null) {
        localVarBuilder.addTextBody("file", ApiInvoker.parameterToString(file), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("file", ApiInvoker.parameterToString(file));
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (InlineResponse20012) ApiInvoker.deserialize(localVarResponse, "", InlineResponse20012.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Upload a file
   * 
   * @param file The file which is being uploaded
  */
  public void mediaPost (String file, final Response.Listener<InlineResponse20012> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'file' is set
    if (file == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'file' when calling mediaPost",
        new ApiException(400, "Missing the required parameter 'file' when calling mediaPost"));
    }

    // create path and map variables
    String path = "/media".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (file != null) {
        localVarBuilder.addTextBody("file", ApiInvoker.parameterToString(file), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("file", ApiInvoker.parameterToString(file));
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InlineResponse20012) ApiInvoker.deserialize(localVarResponse,  "", InlineResponse20012.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Get all media which two user&#39;s have shared between each other
  * 
   * @param userId1 
   * @param userId2 
   * @return InlineResponse20013
  */
  public InlineResponse20013 mediaSharedUserId1UserId2Get (String userId1, String userId2) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'userId1' is set
    if (userId1 == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'userId1' when calling mediaSharedUserId1UserId2Get",
        new ApiException(400, "Missing the required parameter 'userId1' when calling mediaSharedUserId1UserId2Get"));
    }
    // verify the required parameter 'userId2' is set
    if (userId2 == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'userId2' when calling mediaSharedUserId1UserId2Get",
        new ApiException(400, "Missing the required parameter 'userId2' when calling mediaSharedUserId1UserId2Get"));
    }

    // create path and map variables
    String path = "/media/shared/{userId1}/{userId2}".replaceAll("\\{" + "userId1" + "\\}", apiInvoker.escapeString(userId1.toString())).replaceAll("\\{" + "userId2" + "\\}", apiInvoker.escapeString(userId2.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "Authorization" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (InlineResponse20013) ApiInvoker.deserialize(localVarResponse, "", InlineResponse20013.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Get all media which two user&#39;s have shared between each other
   * 
   * @param userId1    * @param userId2 
  */
  public void mediaSharedUserId1UserId2Get (String userId1, String userId2, final Response.Listener<InlineResponse20013> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'userId1' is set
    if (userId1 == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'userId1' when calling mediaSharedUserId1UserId2Get",
        new ApiException(400, "Missing the required parameter 'userId1' when calling mediaSharedUserId1UserId2Get"));
    }
    // verify the required parameter 'userId2' is set
    if (userId2 == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'userId2' when calling mediaSharedUserId1UserId2Get",
        new ApiException(400, "Missing the required parameter 'userId2' when calling mediaSharedUserId1UserId2Get"));
    }

    // create path and map variables
    String path = "/media/shared/{userId1}/{userId2}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "userId1" + "\\}", apiInvoker.escapeString(userId1.toString())).replaceAll("\\{" + "userId2" + "\\}", apiInvoker.escapeString(userId2.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "Authorization" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InlineResponse20013) ApiInvoker.deserialize(localVarResponse,  "", InlineResponse20013.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
